<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns="http://java.sun.com/xml/ns/javaee" xmlns:web="http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_2_5.xsd"
	version="2.5">

	<display-name>ln-manager</display-name>

	<welcome-file-list>
		<welcome-file>/WEB-INF/jsp/adminUser/login.jsp</welcome-file>
	</welcome-file-list>

	<!-- 读取加载spring配置文件 -->
	<context-param>
		<param-name>contextConfigLocation</param-name>
		<param-value>classpath:spring/applicationContext-*.xml</param-value>
	</context-param>
	<listener>
		<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
	</listener>
	<listener>
		<listener-class>org.springframework.web.util.Log4jConfigListener</listener-class>
	</listener>

	<!-- 解决post乱码,Spring字符集过滤器 -->
	<filter>
		<filter-name>CharacterEncodingFilter</filter-name>
		<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
		<init-param>
			<param-name>encoding</param-name>
			<param-value>utf-8</param-value>
		</init-param>
	</filter>
	<filter-mapping>
		<filter-name>CharacterEncodingFilter</filter-name>
		<url-pattern>/*</url-pattern>
	</filter-mapping>

	<!-- springmvc的前端控制器 -->
	<servlet>
		<servlet-name>ln-manager</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- contextConfigLocation不是必须的， 如果不配置contextConfigLocation -->
		<!-- ,springmvc的配置文件默认在：WEB-INF/"ln-manager-servlet.xml" -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:spring/springmvc.xml</param-value>
		</init-param>
		<!-- 启动的时候就加载这个servlet，取值1，2，3，4，5代表的是优先级 -->
		<load-on-startup>1</load-on-startup>
	</servlet>
	<servlet-mapping>
		<servlet-name>ln-manager</servlet-name>
		<!-- 第一种：*.action，访问以.action结尾由DispatcherServlet进行解析 -->
		<!-- 第二种：/，所以访问的地址都由DispatcherServlet进行解析，对于静态文件的解析需要配置不让DispatcherServlet进行解析 
			，使用此种方式可以实现 RESTful风格的url -->
		<!-- 第三种：/*，这样配置不对，使用这种配置，最终要转发到一个jsp页面时， 仍然会由DispatcherServlet解析jsp地址 
			，不能根据jsp页面找到handler，会报错。 -->
		<url-pattern>/</url-pattern>
	</servlet-mapping>

	<!-- 日志记录 -->
	<context-param>
		<!-- 日志配置文件路径 -->
		<param-name>log4jConfigLocation</param-name>
		<param-value>classpath:resource/log4j.properties</param-value>
	</context-param>
	<context-param>
		<!-- 日志页面的刷新间隔 -->
		<param-name>log4jRefreshInterval</param-name>
		<param-value>6000</param-value>
	</context-param>


	<!-- 错误跳转页面 -->
	<error-page>
		<!-- 路径不正确 -->
		<error-code>404</error-code>
		<location>/WEB-INF/jsp/error/404.jsp</location>
	</error-page>
	<error-page>
		<!-- 没有访问权限，访问被禁止 -->
		<error-code>405</error-code>
		<location>/WEB-INF/jsp/error/405.jsp</location>
	</error-page>
	<error-page>
		<!-- 内部错误 -->
		<error-code>500</error-code>
		<location>/WEB-INF/jsp/error/500.jsp</location>
	</error-page>
</web-app>